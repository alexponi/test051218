swagger: '2.0'
info:
  description: |
    Welcome to the Users API reference. 
    The Users API is organized around the [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) methodology, and it uses resource-oriented URLs, and common HTTP response codes to indicate API errors. 
  version: 1.0.0
  title: Users API
  contact:
    email: alexander.ponikarovsky@gmail.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
host: intense-refuge-56146.herokuapp.com
basePath: /
tags:
  - name: Create user
    description: The endpoint creates a new user with the specified parameters.
  - name: List of users
    description: The endpoint returns a list of all users.
  - name: User
    description: The endpoint returns user attributes.
schemes:
  - https
paths:
  /users:
    post:
      tags:
        - Create user
      summary: Create a new user with the specified parameters
      description: Here you can use 2 options. You can place the parameters in the body of the query or in the query string. See descriptions below.
      operationId: addUser
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: body
          in: body
          description: email, password, name
          schema:
            $ref: '#/definitions/UserAttributes'
        - name: user[email]
          in: query
          description: User email
          required: true
          type: string
        - in: query
          name: user[password]
          description: User password
          required: true
          type: string
        - in: query
          name: user[name]
          description: User name
          required: true
          type: string
      responses:
        '201':
          description: User created
          schema:
            $ref: '#/definitions/UserToken'
        '422':
          description: HTTP status 422 in header. Invalid input
          schema:
            type: object
            properties:
              email:
                type: array
                items:
                  example: has already been taken
      security:
        - user_auth:
            - 'write:users'
            - 'read:users'
    get:
      tags:
        - List of users
      summary: Returns list of all users
      description: ''
      operationId: listUsers
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: List of users
          schema:
            $ref: '#/definitions/ListOfUsers'
        description: Success
      security:
        - user_auth:
            - 'write:users'
            - 'read:users'
  /users/:id:
    get:
      tags:
        - User
      summary: Returns user attributes for user with ID
      description: ''
      operationId: attributesUser
      produces:
        - application/json
      parameters:
        - name: id
          in: query
          description: ''
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UserSerialize'
        '404':
          description: HTTP status 404 in header. User with this ID not found
      security:
        - user_auth:
            - 'write:users'
            - 'read:users'
      deprecated: true

securityDefinitions:
  users_auth:
    type: http
    scheme: bearer
    bearerFormat: JWT
    description: Provides Bearer Token access to the users
    flow: implicit
    scopes:
      'write:users': Modify users in your account
      'read:users': Read your users
  api_key:
    type: apiKey
    name: api_key
    description: Provides API Key access to the users
    in: header
definitions:
  UserAttributes:
    type: object
    properties:
      user[email]:
        type: string
        description: user email
        required: true
        example: example1@gmail.com
      user[password]:
        type: string
        description: user password
        required: true
        example: secret
      user[name]:
        type: string
        description: user name
        required: true
        example: John Smith
  UserToken:
    type: object
    properties:
      id:
        type: integer
        format: int64
        example: 1
      password_digest:
        type: string
        example: $2a$10$6/g1kKSDb2JWGSRHFCDhsuCiuEmy6ctfS76fE5caHNeliTNQgTfe6
      key:
        type: string
        description: Api key for authentication
        example: upRo0ccLtSSDjzD9JgLPPwTT
  UserSerialize:
    type: object
    properties:
      data:
        type: object
        properties:
          id:
            type: integer
            format: int64
            example: 1
          type:
            type: string
            example: user
          attributes:
            type: object
            properties:
              email:
                type: string
                example: example1@gmail.com
              name:
                type: string
                description: User full name
                example: John Smith
  ListOfUsers:
    type: object
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/User1'
  User1:
    type: object
    properties:
      id:
        type: integer
        format: int64
        example: 1
      type:
        type: string
        example: user
      attributes:
        type: object
        properties:
          email:
            type: string
            example: example1@gmail.com
          name:
            type: string
            description: User full name
            example: John Smit
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
